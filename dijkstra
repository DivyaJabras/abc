import java.util.Arrays;
import java.util.Scanner;

public class dijkstraa {

  //private static final int INF = Integer.MAX_VALUE;
  private static final int INF = Integer.MAX_VALUE;

  
  
  public void dijkstra(int[][] graph, int source) {
    int n = graph.length;
    int[] dist = new int[n]; 
    boolean[] visited = new boolean[n]; 

    Arrays.fill(dist, INF); 
    dist[source] = 0; 

    for (int i = 0; i < n - 1; i++) {
     
      int u = minDistance(dist, visited);
      visited[u] = true; 
      
      for (int v = 0; v < n; v++) {
        if (!visited[v] && graph[u][v] != 0 && dist[u] != INF && dist[u] + graph[u][v] < dist[v]) {
          dist[v] = dist[u] + graph[u][v];
        }
      }
    }
    printDistances(dist); // print the shortest distances
  }

	
  
  
  private int minDistance(int[] dist, boolean[] visited) {
    int minDist = INF;
    int minVertex = -1;

    for (int i = 0; i < dist.length; i++) {
      if (!visited[i] && dist[i] < minDist) {
        minDist = dist[i];
        minVertex = i;
      }
    }
    return minVertex;
  }
  
  
  
  
  
  private void printDistances(int[] dist) {
    System.out.println("Shortest distances from the source:");
    for (int i = 0; i < dist.length; i++) {
      System.out.println("Vertex " + i + ": " + dist[i]);
    }
  }

  
  public static void main(String[] args) {
//	  int[][] graph = {
//		      { 0, 2, 0, 1, 0 },
//		      { 2, 0, 4, 3, 0 },
//		      { 0, 4, 0, 0, 6 },
//		      { 1, 3, 0, 0, 5 },
//		      { 0, 0, 6, 5, 0 },
//		    };
	  
	  Scanner scanner = new Scanner(System.in);

      System.out.print("Enter the number of vertices: ");
      int n = scanner.nextInt();

      int[][] graph = new int[n][n];
      System.out.println("Enter the adjacency matrix:");
      for (int i = 0; i < n; i++) {
          for (int j = 0; j < n; j++) {
              graph[i][j] = scanner.nextInt();
          }
      }
      
    dijkstraa dijkstra = new dijkstraa();
    dijkstra.dijkstra(graph, 0);
  }
}


